# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - app-keuzekompas-web-prod

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Inject NEXT_PUBLIC_API_URL for Web build (optional)
        run: |
          if [ -n "${{ secrets.NEXT_PUBLIC_API_URL }}" ]; then
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > apps/web/.env.production
            echo "Wrote apps/web/.env.production"
          else
            echo "NEXT_PUBLIC_API_URL secret not set; skipping .env injection"
          fi

      - name: Build web (Nx)
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: npx nx build web --configuration=production

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist/apps/web

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: web-dist

      - name: Show downloaded files (debug)
        run: |
          pwd
          ls -la
          echo "Contents of web-dist:" && ls -la web-dist

      - name: Create deployment archive (Next standalone if present)
        id: package-web
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          DEPLOY_DIR="web-dist"
          STANDALONE_DIR=""
          if [ -d "$DEPLOY_DIR/.next/standalone" ]; then
            STANDALONE_DIR="$DEPLOY_DIR/.next/standalone"
          elif [ -d "$DEPLOY_DIR/standalone" ]; then
            STANDALONE_DIR="$DEPLOY_DIR/standalone"
          fi

          SERVER_ENTRY=""
          if [ -n "$STANDALONE_DIR" ]; then
            # Common Next path
            if [ -f "$STANDALONE_DIR/server.js" ]; then
              SERVER_ENTRY="server.js"
            elif [ -f "$STANDALONE_DIR/apps/web/server.js" ]; then
              SERVER_ENTRY="apps/web/server.js"
            else
              FOUND=$(find "$STANDALONE_DIR" -maxdepth 5 -type f -name server.js | head -n1 || true)
              if [ -n "$FOUND" ]; then
                SERVER_ENTRY="${FOUND#"$STANDALONE_DIR/"}"
              fi
            fi
          fi

          if [ -n "$STANDALONE_DIR" ] && [ -n "$SERVER_ENTRY" ]; then
            echo "Using standalone server at: $SERVER_ENTRY"
            TMP_DIR="$(mktemp -d)"
            # Copy standalone to tmp
            cp -R "$STANDALONE_DIR/." "$TMP_DIR/"
            # Static assets
            mkdir -p "$TMP_DIR/.next/static"
            if [ -d "$DEPLOY_DIR/.next/static" ]; then
              cp -R "$DEPLOY_DIR/.next/static/." "$TMP_DIR/.next/static/"
            fi
            # Public
            if [ -d "$DEPLOY_DIR/public" ]; then
              cp -R "$DEPLOY_DIR/public/." "$TMP_DIR/public/"
            fi
            # Root bootstrap to satisfy Oryx default startup (node server.js)
            echo "Creating bootstrap server.js at zip root (robust multi-path require)"
            echo "try{require('./$SERVER_ENTRY')}catch(e){try{require('./apps/web/server.js')}catch(e2){try{require('./.next/standalone/apps/web/server.js')}catch(e3){require('./.next/standalone/server.js')}}}" > "$TMP_DIR/server.js"
            pushd "$TMP_DIR" >/dev/null
            zip -r "$ROOT/web-dist.zip" .
            popd >/dev/null
            rm -rf "$TMP_DIR"
            echo "server_entry=$SERVER_ENTRY" >> "$GITHUB_OUTPUT"
          else
            echo "No standalone output found; zipping entire web-dist (startup may fail)"
            pushd "$DEPLOY_DIR" >/dev/null
            # Create a bootstrap even in fallback to try common entrypoints
            echo "try{require('./apps/web/server.js')}catch(e){try{require('./server.js')}catch(e2){try{require('./.next/standalone/apps/web/server.js')}catch(e3){require('./.next/standalone/server.js')}}}" > server.js
            zip -r "$ROOT/web-dist.zip" . server.js
            popd >/dev/null
            echo "server_entry=server.js" >> "$GITHUB_OUTPUT"
          fi

      - name: Show package contents (debug)
        run: unzip -l web-dist.zip | sed -n '1,200p'
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_83588BC80EBC456295CA2C7DB7E0612C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_1814C76360C1493297C48C6A0E9DB5DA }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5E6F5E5F11C44738B8FB4CD5E2EC99E9 }}

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_83588BC80EBC456295CA2C7DB7E0612C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_1814C76360C1493297C48C6A0E9DB5DA }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5E6F5E5F11C44738B8FB4CD5E2EC99E9 }}

      - name: 'Deploy to Azure Web App (attempt 1)'
        id: deploy-to-webapp-1
        continue-on-error: true
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-keuzekompas-web-prod'
          slot-name: 'Production'
          package: web-dist.zip
          type: zip
          startup-command: 'node server.js'

      - name: 'Wait before retry'
        if: ${{ steps.deploy-to-webapp-1.outcome == 'failure' }}
        run: sleep 30

      - name: 'Deploy to Azure Web App (attempt 2)'
        if: ${{ steps.deploy-to-webapp-1.outcome == 'failure' }}
        id: deploy-to-webapp-2
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-keuzekompas-web-prod'
          slot-name: 'Production'
          package: web-dist.zip
          type: zip
          startup-command: 'node server.js'
          